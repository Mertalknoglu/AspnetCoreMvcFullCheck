@model List<AspnetCoreMvcFull.Models.Models.Request>

@{
    string kaynak = ViewData["gelen"]?.ToString()?.ToLower() ?? "";
    string tableId = kaynak == "true" ? "gelenTablo" : "gonderilenTablo";
    bool isGelen = kaynak == "true";
}

@if (Model != null && Model.Any())
{
    <!-- Masaüstü görünüm -->
    <div class="d-none d-md-block">
        <div class="table-responsive">
            <table id="@tableId" class="table table-striped table-bordered align-middle w-100">
                <thead class="table-light">
                    <tr>
                        <th></th>
                        <th>Ad Soyad <b>↑↓</b></th>
                        <th>Talep Tipi <b>↑↓</b></th>
                        <th>Iletilen Birim <b>↑↓</b></th>
                        <th>Durum <b>↑↓</b></th>
                        <th>Tarih <b>↑↓</b> </th>
                        <th>Açıklama <b>↑↓</b></th>
                        <th class="text-center">İşlem</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                                   <td>@item.Id</td>
                            <td>@item.FirstName @item.Surname</td>
                            <td>@item.RequestType?.Type</td>
                            <td>@item.RequestUnit?.Unit</td>
                            <td>@item.RequestStatus?.Status</td>
                            <td>@item.Date.ToString("dd.MM.yyyy HH:mm")</td>
                            <td>@item.Description</td>
                            <td class="text-center">
                                <div class="d-flex justify-content-center align-items-center gap-1 flex-nowrap">
                                    <button class="btn btn-sm btn-outline-dark" title="Detaylar" onclick="showDetails(@item.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                    @if (ViewBag.IsAdmin == true)
                                    {
                                        <a class="btn btn-sm btn-outline-primary" title="Güncelle" href="@Url.Action("Edit", new { id = item.Id })">
                                            <i class="bi bi-pencil-square"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-primary" title="Düzenle" onclick="openUpdateModal(@item.Id)">
                                            <i class="bi bi-pencil"></i>
                                        </button>

                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteRequest(@item.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                        @if (item.RequestStatus?.Status == "Tamamlandı")
                                        {
                                            <span class="badge bg-outline-danger px-3 py-2" style="background-color:#dc3545; color:white;">KAPANDI</span>
                                        }
                                    }
                                    else @if (!ViewBag.IsAdmin && item.RequestStatus?.Status != "Tamamlandı")
                                    {
                                       
                                        <button class="btn btn-sm btn-outline-primary" title="Düzenle" onclick="openUpdateModal(@item.Id)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                    }else{

                                        @if (item.RequestStatus?.Status == "Tamamlandı")
                                        {
                                            <span class="badge bg-success px-3 py-2" style="background-color:#dc3545; color:white;">KAPANDI</span>
                                        }
                                    }
                                  
                                </div>
                            </td>




                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>


    <!-- Mobil görünüm -->
    <div class="d-block d-md-none">
        <div class="row row-cols-1 g-3">

            @foreach (var item in Model)
            {
                <div class="col">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="card-title mb-0">@item.FirstName @item.Surname</h5>
                                <span class="badge bg-secondary">@item.RequestStatus?.Status</span>
                            </div>
                            <ul class="list-unstyled small mb-2">
                                <li><strong>Talep Tipi:</strong> @item.RequestType?.Type</li>
                                <li><strong>Iletilen Birim:</strong> @item.RequestUnit?.Unit</li>
                                <li><strong>Tarih:</strong> @item.Date.ToString("dd.MM.yyyy")</li>
                                <li><strong>Açıklama:</strong> @item.Description</li>
                            </ul>
                            <div class="d-flex justify-content-center gap-2 flex-wrap mt-2">
                                <!-- Detay Butonu (herkes görür) -->
                                <button class="btn btn-sm btn-outline-dark" onclick="showDetails(@item.Id)">
                                    <i class="bi bi-eye"></i>
                                </button>

                                @if (ViewBag.IsAdmin == true)
                                {
                                    <a class="btn btn-sm btn-outline-primary" href="@Url.Action("Edit", new { id = item.Id })">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                    <button class="btn btn-sm btn-outline-primary" onclick="openUpdateModal(@item.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteRequest(@item.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>

                                    @if (item.RequestStatus?.Status == "Tamamlandı")
                                    {
                                        <span class="badge w-100 text-center" style="background-color:#dc3545; color:white;">KAPANDI</span>
                                    }
                                }
                                else if (!ViewBag.IsAdmin && item.RequestStatus?.Status != "Tamamlandı")
                                {
                                    <button class="btn btn-sm btn-outline-primary" onclick="openUpdateModal(@item.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                }
                                else
                                {
                                    @if (item.RequestStatus?.Status == "Tamamlandı")
                                    {
                                        <span class="badge w-100 text-center" style="background-color:#dc3545; color:white;">KAPANDI</span>
                                    }
                                }
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-danger text-center">Kayıt bulunamadı.</div>
    <a href="@Url.Action("Index", "Request")" class="btn btn-outline-primary align-items-center">Talep listesini yenile</a>
}
<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="exportModalLabel" style="color:white;">Verileri Dışa Aktar</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary" onclick="exportMobile('excel')"> <i class="bi bi-file-earmark-arrow-down"></i>Excel</button>
                    <button class="btn btn-outline-primary" onclick="exportMobile('csv')"><i class="bi bi-file-earmark-arrow-down"></i> CSV</button>
                    <button class="btn btn-outline-primary" onclick="exportMobile('pdf')"><i class="bi bi-file-earmark-arrow-down"></i> PDF</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Filtre Modal (mobil için) -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" style="color:white;">Filtreleme Yap</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form method="get" action="@Url.Action("FilteredIndex", "Request")">
                <div class="modal-body">
                    <input type="date" name="startDate" class="form-control mb-2" placeholder="Başlangıç Tarihi">
                    <input type="date" name="endDate" class="form-control mb-2" placeholder="Bitiş Tarihi">

                    <select name="statusId" class="form-select mb-2">
                        <option value="">Durum Seçiniz</option>
                        @foreach (var item in ViewBag.RequestStatusList as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>

                    <select name="typeId" class="form-select mb-2">
                        <option value="">Kategori Seçiniz</option>
                        @foreach (var item in ViewBag.RequestTypeList as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>

                    <select name="unitId" class="form-select mb-2">
                        <option value="">Birim Seçiniz</option>
                        @foreach (var item in ViewBag.RequestUnitList as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <div class="modal-footer d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary me-2">Ara</button>
                    <a href="@Url.Action("Index", "Request")" class="btn btn-outline-secondary">Filtreyi Kaldır</a>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        ['#gelenTablo', '#gonderilenTablo'].forEach(function (selector) {
            const tablo = $(selector);
            if (tablo.length && !$.fn.DataTable.isDataTable(tablo)) {
                tablo.DataTable({
                    paging: true,
                    searching: true,
                    ordering: true,
                    responsive: true,
                        dom: `
        <'row mb-2'
            <'col-md-6 d-flex align-items-center gap-3'
                <'me-2'l>
                B
            >
            <'col-md-6 text-end'f>
        >
        <'row'
            <'col-12 table-responsive't>
        >
        <'row mt-2'
            <'col-md-6'i>
            <'col-md-6 d-flex justify-content-end'p>
        >
    `,

                    buttons: [
                        {
                            extend: 'collection',
                            text: 'Dışa Aktar',
                            className: 'btn btn-outline-secondary',
                            buttons: [
                                { extend: 'copy', text: 'Kopyala' },
                                { extend: 'excel', text: 'Excel' },
                                { extend: 'csv', text: 'CSV' },
                                { extend: 'pdf', text: 'PDF' },
                                { extend: 'print', text: 'Yazdır' }
                            ]
                        }
                    ],
                    language: {
                        url: "https://cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json",
                        lengthMenu: "_MENU_ adet kayıt listele"
                    }
                });
            }
        });

        // Sekme geçişlerinde responsive fix
        $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
            const targetId = $(e.target).attr("data-bs-target");
            const table = $(targetId).find('table').DataTable();
            table.columns.adjust().responsive.recalc();
        });
    });


    // Detayları gösteren modalı aç
    function showDetails(id) {
        $.ajax({
            url: '/Request/GetDetails/' + id,
            type: 'GET',
            success: function (data) {
                $('#modalTckn').text(data.tckn);
                $('#modalName').text(data.firstName + ' ' + data.surname);
                $('#modalRequestType').text(data.requestType);
                $('#modalStatus').text(data.requestStatus);
                $('#modalDate').text(data.date);
                $('#modalDescription').text(data.description);

                       let logHtml = '';
    if (data.logs && data.logs.length > 0) {
        data.logs.forEach(log => {
            logHtml += `
                <div class="border rounded p-2 shadow-sm" style="background-color: transparent;">
                    <div class="fw-semibold text-dark mb-1">
                        <i class="bi bi-pencil-square me-1 text-primary"></i>${log.actionType}
                    </div>
                    <div class="text-muted mb-1" style="font-size: 0.9rem;">${log.description}</div>
                    <div class="text-end text-secondary small">
                        <i class="bi bi-person-circle me-1"></i>${log.changedBy} – ${log.date}
                    </div>
                </div>`;
        });
    } else {
        logHtml = "<span class='text-muted'>İşlem geçmişi bulunamadı.</span>";
    }
    $('#modalLogs').html(logHtml);



                let fileHtml = '';
                if (data.files && data.files.length > 0) {
                    data.files.forEach(file => {
                        const fileName = file.split('/').pop();
                        fileHtml += `
                            <div class="position-relative" style="width:120px;height:120px;">
                                <img src="${file}" class="img-thumbnail w-100 h-100" style="border-radius:6px; object-fit:cover;">
                                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center gap-2"
                                     style="background:rgba(0,0,0,0.6); opacity:0; transition:opacity 0.3s;"
                                     onmouseover="this.style.opacity=1"
                                     onmouseout="this.style.opacity=0">
                                    <a href="${file}" download="${fileName}" class="btn btn-sm btn-light">
                                        <i class="bi bi-download"></i>
                                    </a>
                                    <a href="${file}" target="_blank" class="btn btn-sm btn-light">
                                        <i class="bi bi-box-arrow-up-right"></i>
                                    </a>
                                </div>
                            </div>
                        `;
                    });
                } else {
                    fileHtml = "<span>Dosya bulunamadı.</span>";
                }

                $('#modalFiles').html(fileHtml);
                const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
                modal.show();
            },
            error: function () {
                alert("Detaylar yüklenemedi.");
            }
        });
    }

    // Güncelleme modalı aç
   function openUpdateModal(id) {
    $('#updateRequestId').val(id);

    // 1. Mevcut dosyaları getir
    $.ajax({
        url: `/Request/GetFiles/${id}`,
        type: 'GET',
        success: function (filesData) {
            let html = '';
            filesData.forEach(file => {
                html += `
                    <div class="position-relative" style="width: 120px;">
                        <img src="${file}" class="img-thumbnail" style="height:100px; object-fit:cover;" />
                        <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0"
                            onclick="deleteFile('${file}', ${id})" style="border-radius:50%;">×</button>
                    </div>`;
            });
            $('#existingFiles').html(html);
        }
    });

    // 2. Talep detaylarını getir
    $.ajax({
        url: `/Request/GetDetails/${id}`,
        type: 'GET',
        success: function (data) {
            if (!data.success) {
                alert(data.message);
                return;
            }

            // dropdownları güncelle
                // Dropdown değerlerini önce sıfırla
    $('#RequestTypeId option').prop('selected', false);
    $('#RequestUnitId option').prop('selected', false);
    $('#RequestStatusId option').prop('selected', false);

    // Sonra doğru olanı seç
    $(`#RequestTypeId option[value="${data.requestTypeId}"]`).prop('selected', true);
    $(`#RequestUnitId option[value="${data.requestUnitId}"]`).prop('selected', true);
    $(`#RequestStatusId option[value="${data.requestStatusId}"]`).prop('selected', true);


            const updateModal = new bootstrap.Modal(document.getElementById('updateRequestModal'));
            updateModal.show();
        }
    });
}


function deleteRequest(id) {
    if (!confirm("Bu talebi silmek istediğinize emin misiniz?")) return;

    $.ajax({
        url: '/Request/DeleteConfirmed/' + id,
        type: 'POST',
        success: function (res) {
            if (res.success) {
                alert("Silindi!");
                location.reload();
            } else {
                alert("Hata oluştu: " + res.message);
            }
        },
        error: function () {
            alert("Silme işlemi sırasında hata oluştu.");
        }
    });
}

$(document).ready(function () {
    $('#updateRequestForm').off('submit').on('submit', function (e) {
        e.preventDefault();

        const id = $('#updateRequestId').val();
        const form = document.getElementById('updateRequestForm');
        const formData = new FormData(form);

        $.ajax({
            url: `/Request/EditAjax/${id}`,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.success) {
                    alert("Talep başarıyla güncellendi!");
                    location.reload();
                } else {
                    alert(response.message || "Güncelleme başarısız.");
                }
            },
            error: function () {
                alert("Sunucu hatası oluştu.");
            }
        });
    });
});


</script>

            <script>
    async function exportMobile(type) {
        const cards = document.querySelectorAll(".d-block.d-md-none .card");
        const headers = ["Ad Soyad", "Tipi", "Birim", "Tarih", "Açıklama", "Durum"];
        let rows = [];

        cards.forEach(card => {
            const name = card.querySelector(".card-title").innerText.trim();
            const status = card.querySelector(".badge").innerText.trim();
            const detailElements = card.querySelectorAll("ul.list-unstyled li");

            let type = detailElements[0]?.innerText.replace('Tipi:', '').trim();
            let unit = detailElements[1]?.innerText.replace('Birim:', '').trim();
            let date = detailElements[2]?.innerText.replace('Tarih:', '').trim();
            let description = detailElements[3]?.innerText.replace('Açıklama:', '').trim();

            rows.push({ "Ad Soyad": name, "Tipi": type, "Birim": unit, "Tarih": date, "Açıklama": description, "Durum": status });
        });

        if (type === "excel") {
            const ws = XLSX.utils.json_to_sheet(rows);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Talepler");
            XLSX.writeFile(wb, "talepler.xlsx");
        }
        else if (type === "csv") {
            const ws = XLSX.utils.json_to_sheet(rows);
            const csvData = XLSX.utils.sheet_to_csv(ws, { FS: ";" });
            const blob = new Blob(["\uFEFF" + csvData], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "talepler.csv";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
        else if (type === "pdf") {
            const tableHtml = `
                <table style="font-family:Arial, sans-serif; border-collapse:collapse; width:100%;">
                    <thead style="background:#34495e;color:#fff;">
                        <tr>${headers.map(h => `<th style="padding:6px;border:1px solid #ccc;">${h}</th>`).join('')}</tr>
                    </thead>
                    <tbody>
                        ${rows.map(row => `
                            <tr>${Object.values(row).map(value => `<td style="padding:6px;border:1px solid #ccc;">${value}</td>`).join('')}</tr>
                        `).join('')}
                    </tbody>
                </table>`;

            const pdfContainer = document.createElement("div");
            pdfContainer.innerHTML = tableHtml;
            pdfContainer.style.position = 'fixed';
            pdfContainer.style.top = '-9999px';
            document.body.appendChild(pdfContainer);

            html2canvas(pdfContainer, { scale: 2 }).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jspdf.jsPDF('landscape');
                const imgWidth = pdf.internal.pageSize.getWidth();
                const imgHeight = canvas.height * imgWidth / canvas.width;
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save("talepler.pdf");
                document.body.removeChild(pdfContainer);
            });
        }
    }

    function deleteFile(filePath, requestId) {
        if (!confirm("Bu dosyayı silmek istediğinize emin misiniz?")) return;

        $.ajax({
            url: '/Request/DeleteFile',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ filePath: filePath, requestId: requestId }),
            success: function () {
                alert("Dosya silindi.");
                openUpdateModal(requestId); // Silindikten sonra yeniden yükle
            },
            error: function () {
                alert("Dosya silinirken bir hata oluştu.");
            }
        });
    }

</script>
